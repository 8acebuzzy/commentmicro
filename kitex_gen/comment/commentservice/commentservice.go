// Code generated by Kitex v0.4.4. DO NOT EDIT.

package commentservice

import (
	"context"
	comment "github.com/ClubWeGo/commentmicro/kitex_gen/comment"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentServiceServiceInfo
}

var commentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CommentService"
	handlerType := (*comment.CommentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CommentMethod":     kitex.NewMethodInfo(commentMethodHandler, newCommentServiceCommentMethodArgs, newCommentServiceCommentMethodResult, false),
		"CommentListMethod": kitex.NewMethodInfo(commentListMethodHandler, newCommentServiceCommentListMethodArgs, newCommentServiceCommentListMethodResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "comment",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func commentMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentServiceCommentMethodArgs)
	realResult := result.(*comment.CommentServiceCommentMethodResult)
	success, err := handler.(comment.CommentService).CommentMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceCommentMethodArgs() interface{} {
	return comment.NewCommentServiceCommentMethodArgs()
}

func newCommentServiceCommentMethodResult() interface{} {
	return comment.NewCommentServiceCommentMethodResult()
}

func commentListMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentServiceCommentListMethodArgs)
	realResult := result.(*comment.CommentServiceCommentListMethodResult)
	success, err := handler.(comment.CommentService).CommentListMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceCommentListMethodArgs() interface{} {
	return comment.NewCommentServiceCommentListMethodArgs()
}

func newCommentServiceCommentListMethodResult() interface{} {
	return comment.NewCommentServiceCommentListMethodResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CommentMethod(ctx context.Context, request *comment.CommentReq) (r *comment.CommentResp, err error) {
	var _args comment.CommentServiceCommentMethodArgs
	_args.Request = request
	var _result comment.CommentServiceCommentMethodResult
	if err = p.c.Call(ctx, "CommentMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentListMethod(ctx context.Context, request *comment.CommentListReq) (r *comment.CommentListResp, err error) {
	var _args comment.CommentServiceCommentListMethodArgs
	_args.Request = request
	var _result comment.CommentServiceCommentListMethodResult
	if err = p.c.Call(ctx, "CommentListMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
